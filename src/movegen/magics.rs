use crate::defs::{Bitboard, NrOf};

// Magic numbers for the rook generated with some trickery DONT CHANGE THEM
pub const ROOK_MAGIC_NRS: [u64; NrOf::SQUARES] = [
    2341872361636118536u64,
    9313479214043054080u64,
    1188959235158835332u64,
    72066407850836224u64,
    144117389316851744u64,
    216185976396251138u64,
    36030996193215616u64,
    144116289940619300u64,
    9530883449523945480u64,
    1441222250039627776u64,
    141287512612864u64,
    11720758802080859266u64,
    4756082715856471216u64,
    1297740672182386816u64,
    18296165560746496u64,
    562959685320850u64,
    9227911370614247552u64,
    6054176279983300608u64,
    1408474932068368u64,
    9376776999211110400u64,
    4611968594258427908u64,
    1126449696243716u64,
    648821811585222657u64,
    1486190076261728516u64,
    36047236387315720u64,
    4624634013389226112u64,
    288247970487337088u64,
    4521202551357568u64,
    578714752214368321u64,
    13835343930453000320u64,
    617556107493376776u64,
    292738382415545477u64,
    11999982219503338016u64,
    576601635988456192u64,
    18084977723858944u64,
    288301681232322640u64,
    668785101005392896u64,
    2345250606542758400u64,
    94593193286313985u64,
    2533414662045762u64,
    19562649394118656u64,
    9948539538328535041u64,
    2639267711850414208u64,
    144150655916965896u64,
    734368248603148300u64,
    72339120556539912u64,
    613072360413331457u64,
    9224568598176333829u64,
    73605706950902144u64,
    19283509942157440u64,
    585470700605680256u64,
    35515085619456u64,
    9301481377251983488u64,
    281500880994560u64,
    5779179413013504u64,
    2784263144960u64,
    299617002733605u64,
    36099178656960545u64,
    291046260331282450u64,
    58547380614340865u64,
    9949014664338737154u64,
    4901323786647241281u64,
    9827135879105871873u64,
    23099159305519170u64,
];

// Magic numbers for the bishop generated with some trickery DONT CHANGE THEM
pub const BISHOP_MAGIC_NRS: [u64; NrOf::SQUARES] = [
    164399051733797904u64,
    2307110780531704200u64,
    9296564346506191108u64,
    48485164786974976u64,
    9224502472250233344u64,
    9572358476046465u64,
    378867522050535425u64,
    4648629755285865488u64,
    9282349359566422272u64,
    142947284945152u64,
    11549771592783499864u64,
    2260635652980736u64,
    9223376453725397536u64,
    594477358461747202u64,
    4611688251878278144u64,
    19888112386704448u64,
    7318626696956032u64,
    2251809612104832u64,
    1126183443103752u64,
    146384872201523200u64,
    1155314196605304840u64,
    1193735487949406791u64,
    1585549102177918996u64,
    72198890015429408u64,
    2322443977097472u64,
    1164290454871869442u64,
    10134748764636160u64,
    579007223515095072u64,
    5188992295213481996u64,
    218424719400010777u64,
    5633898696540418u64,
    721000360609906816u64,
    11349228282978304u64,
    290408509210880u64,
    96774205734978u64,
    297241977748982016u64,
    1315073219400695936u64,
    144396976585310468u64,
    58724924629468420u64,
    9367632361950347520u64,
    2955488390440552524u64,
    12106106841995573536u64,
    288239448464820224u64,
    321332575211588u64,
    144423330571616320u64,
    5332842569683042432u64,
    217527406311768640u64,
    578721422308278337u64,
    9433878654746624u64,
    1225124236630163456u64,
    11673330934362935832u64,
    9241386986227925504u64,
    9241387603629047820u64,
    291361794160723968u64,
    342349030027755528u64,
    1172290503606337792u64,
    36173950279092256u64,
    634439701045312u64,
    8112108829405235205u64,
    81064793831671844u64,
    844442378569856u64,
    576460786931663360u64,
    2396223700525515777u64,
    1157454825425993764u64,
];

#[derive(Default, Copy, Clone)]
pub struct Magic {
    pub mask: Bitboard,
    pub shift: u8,
    pub offset: u64,
    pub nr: u64,
}

// Get index does the actual shift on the u64 bitboard do get rid of the crap in the bitboard
impl Magic {
    pub fn get_index(&self, occupancy: Bitboard) -> usize {
        let blockerboard = occupancy & self.mask;
        ((blockerboard.wrapping_mul(self.nr) >> self.shift) + self.offset) as usize
    }
}
